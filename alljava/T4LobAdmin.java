package com.tandem.t4jdbc;

// @ @ @ START COPYRIGHT @ @ @
//
// Copyright 2004, 2005
// -Packard Development Company, L.P.
// Protected as an unpublished work.
// All rights reserved.
//
// The computer program listings, specifications and
// documentation herein are the property of Compaq Compter
// Corporation and successor entities such as Hewlett Packard
// Development Company, L.P., or a third party supplier and
// shall not be reproduced, copied, disclosed, or used in whole
// or in part for any reason without the prior express written
// permission of Hewlett Packard Developmnet Company, L.P.
//
// @ @ @ END COPYRIGHT @ @ @
/* -*-java-*-
 * Filename    : T4LobAdmin.java
 * Author      : Selva, Swastik Bihani
 * Desctiption : This program helps in administration functions for LOBs.
 *
 */
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;

public class T4LobAdmin {
	static {
		loadprops();
	}

	public static void main(String args[]) {
		String s;
		boolean create = false;
		boolean trigger = false;
		boolean drop = false;
		boolean unicode = false;
		boolean spj = false;
		String tableName = null;
		String fileName = null;
		boolean bigblock = false;
		T4LobAdmin lobAdmin;

		System.err.println("Hewlett Packard Enterprise Type 4 Lob Admin Utility 1.0");
		System.err
				.println("(c) Copyright 2016 Hewlett Packard Enterprise Development Company, LP");
		if (args.length == 0) {
			doSql_ = false;
		} else {
			for (int i = 0; i < args.length; i++) {
				s = args[i];
				if (s.equals("-exec")) {
					doSql_ = true;
				} else if (s.equals("-create")) {
					create = true;
				} else if (s.equals("-trigger")) {
					trigger = true;
				} else if (s.equals("-drop")) {
					drop = true;
				} else if (s.equals("-unicode")) {
					unicode = true;
				} else if (s.equals("-spj")) {
					spj = true;
				} else if (s.equals("-out")) {
					i++;
					if (i < args.length) {
						fileName = args[i];
					}
				}else if(s.equals("-bigblock")){
					bigblock = true;
				}
				else if (!s.startsWith("-")) {
					tableName = s;
				} else {
					displayHelp();
					return;
				}
			}
		}
		try {
			if (create || trigger || drop) {
				Class.forName("com.tandem.t4jdbc.SQLMXDriver");
			}
			if (fileName != null) {
				out_ = new PrintStream(new FileOutputStream(fileName, true),
						true);
			} else {
				out_ = System.out;
			}
		} catch (Exception e1) {
			System.out.println(e1.getMessage());
			return;
		}
		try {
			// clobTableName_ = getLobTableName("t4sqlmx.clobTableName");
			// blobTableName_ = getLobTableName("t4sqlmx.blobTableName");
			clobTableName_ = getClobTableName();
			blobTableName_ = getBlobTableName();
			out_
					.println("-- Script generated by Hewlett Packard Enterprise JDBC Type 4 Lob Admin Utility 1.0");
			out_.println("");
			if (create) {
				if (clobTableName_ == null && blobTableName_ == null) {
					throw new SQLException(
							"Either t4sqlmx.clobTableName or t4sqlmx.blobTableName "
									+ "or both properties should be set");
				} else {
					createLobTable(clobTableName_, unicode,bigblock);
					// createLobTable(clobTableName_, false);
					createLobTable(blobTableName_, false,bigblock);
				}
			}
			if (trigger) {
				if (tableName == null) {
					throw new SQLException(
							"Table name containing the CLOB/BLOB column should be given "
									+ "when -trigger option is given");
				} else {
					createTriggers(tableName);
				}
			}
			if (drop) {
				if (tableName == null) {
					throw new SQLException(
							"Table name containing the CLOB/BLOB column should be given "
									+ "when -trigger option is given");
				} else {
					dropTriggers(tableName);
				}
			}
			if (spj) {
				createSPJTables();
			}
		} catch (SQLException e) {
			SQLException nextException;

			nextException = e;
			do {
				System.out.println(nextException.getMessage());
				System.out.println("SQLState   " + nextException.getSQLState());
				System.out
						.println("Error Code " + nextException.getErrorCode());
			} while ((nextException = nextException.getNextException()) != null);
		}
	}

	private static void displayHelp() {
		System.err
				.println("java [<java_options>] T4LobAdmin [<prog_options>] [<table_name>]");
		System.err.println("");
		System.err.println("<java_options> is:");
		System.err.println("    [-Dt4sqlmx.properties=<properties file>]");
		System.err
				.println("where <properties file> has values for the following:");
		System.err.println("    clobTableName - CLOB table name");
		System.err.println("    blobTableName - BLOB table name");
		System.err
				.println("    url           - URL used for the Type 4 connection");
		System.err
				.println("    user          - User name for the Type 4 connection");
		System.err
				.println("    password      - Password for associated with the user");
		/*
		 * System.err.println(" [-Dt4sqlmx.clobTableName=<clobTableName>]");
		 * System.err.println(" [-Dt4sqlmx.blobTableName=<blobTableName>]");
		 * System.err.println(" [-Dt4sqlmx.catalog=<catalog>]");
		 * System.err.println(" [-Dt4sqlmx.schema=<schema>]");
		 */
		System.err.println("");
		System.err.println("<prog_options> is:");
		System.err
				.println("    [-exec] [-create] [-trigger] [-unicode] [-spj] [-help] [-drop] [-out <filename>] [-bigblock]");
		// System.err.println(" [-exec] [-create] [-trigger] [-help] [-drop]
		// [-out <filename>]");
		System.err.println("where -help    - Display this information.");
		System.err
				.println("      -exec      - Execute the SQL statements that are generated.");
		System.err
				.println("      -create    - Generate SQL statements to create LOB tables.");
		System.err
				.println("      -trigger   - Generate SQL statements to create triggers for <table_name>.");
		System.err
				.println("      -unicode   - Generate SQL statements to create unicode LOB tables (CLOB only).");
		System.err
				.println("      -spj       - Generate SQL statements to create and execute tables for SPJ LOB usage");
		System.err
				.println("      -drop      - Generate SQL statements to drop triggers for <table_name>.");
		System.err
				.println("      -out       - Write the SQL statements to <filename>.");
		System.err
				.println("      -bigblock  - Generates SQL Statement to create Lob column size of 24K bytes and attribute block size of 32K.");
		System.err.println("");
		System.err.println("<clobTableName> | <blobTableName> is:");
		System.err.println("    <catalogName>.<schemaName>.<lobTableName>");
		System.err.println("");
		System.err.println("<table_name> is:");
		System.err
				.println("    [<catalogName>.][<schemaName>.]<baseTableName>");
		System.err.println("");
		System.err
				.println("<baseTableName> is the table that contains LOB column(s).");
		System.err
				.println("<lobTableName> is the table that contains the LOB data.");
	}

	private static String getClobTableName() throws SQLException {
		String lobTableName;
		int count = 0;
		int fromIndex = -1;
		// lobTableName = System.getProperty(prop);
		lobTableName = t4Props.getClobTableName();
		if (lobTableName != null) {
			while (((fromIndex = lobTableName.indexOf('.', fromIndex + 1)) != -1)
					&& count < 2) {
				count++;
			}
			if (count < 2) {
				throw new SQLException(
						"ClobTableName is not of the format catalog.schema.tablename");
			}
		}
		return lobTableName;
	}

	private static String getBlobTableName() throws SQLException {
		String lobTableName;
		int count = 0;
		int fromIndex = -1;
		// lobTableName = System.getProperty(prop);
		lobTableName = t4Props.getBlobTableName();
		int tempIndex = 0;
		if (lobTableName != null) {
			while (((fromIndex = lobTableName.indexOf('.', fromIndex + 1)) != -1)
					&& count < 2) {
				if (count == 0) {
					catalog = lobTableName.substring(0, fromIndex);
					tempIndex = fromIndex;
				}
				if (count == 1)
					schema = lobTableName.substring(tempIndex + 1, fromIndex);
				count++;
			}
			if (count < 2) {
				throw new SQLException(
						"BlobTableName is not of the format catalog.schema.tablename");
			}
		}
		return lobTableName;
	}

	private static void createLobTable(String lobTableName, boolean isUnicode,boolean isBigBlock)
			throws SQLException {
		String s;
		StringBuffer sqlString;
		Statement stmt;
		Connection conn = null;

		if (lobTableName == null) {
			return;
		}
		sqlString = new StringBuffer();
		out_.println("-- SQL statement to create LOB table " + lobTableName);
		out_.println("");
		s = "CREATE TABLE " + lobTableName;
		out_.println(s);
		sqlString.append(s);
		if (isUnicode) {
			s = " (table_name VARCHAR(128) NOT NULL NOT DROPPABLE,";
		} else {
			s = " (table_name CHAR(128) NOT NULL NOT DROPPABLE,";
		}
		out_.println(s);
		sqlString.append(s);
		s = " data_locator LARGEINT NOT NULL NOT DROPPABLE,";
		out_.println(s);
		sqlString.append(s);
		s = " chunk_no INT NOT NULL NOT DROPPABLE,";
		out_.println(s);
		sqlString.append(s);
		/*
		 * Note: If Unicode table is created with lob_data VARCHAR set to 1940
		 * of higher the following Nonstop SQLMX Database exception is generated:
		 * *** ERROR[1140] Row-length 4038 exceeds the maximum allowed
		 * row-length of 4036 for table SWDEV1.SGREEN.CLOBUNI. *** ERROR[1029]
		 * Object SWDEV1.SGREEN.CLOBUNI could not be created.
		 */

		if (!isUnicode) {
			if(isBigBlock){
			s = " lob_data VARCHAR(24000),";
		} else {
				s = " lob_data VARCHAR(3880),";
			}
		}
		else {
			if(isBigBlock){
				s = " lob_data VARCHAR(12000) CHARACTER SET UCS2,";//modified for R3.1
			}else {
			s = " lob_data VARCHAR(1939) CHARACTER SET UCS2,";
			}
		}
		out_.println(s);
		sqlString.append(s);
		s = " PRIMARY KEY(table_name, data_locator, chunk_no)) ";
		out_.println(s);
		sqlString.append(s);
		if(!isBigBlock){
		s = " ATTRIBUTES EXTENT(1024), MAXEXTENTS 768 ;";
		}else {
			s = " ATTRIBUTES blocksize 32768, MAXEXTENTS 768 ;";
		}
		out_.println(s);
		sqlString.append(s);
		out_.println("");
		if (doSql_) {
			try {
				conn = DriverManager
						.getConnection(url, t4Props.getProperties());
				stmt = conn.createStatement();
				stmt.executeUpdate(sqlString.toString());
			} finally {
				if (conn != null) {
					conn.close();
				}
			}
		}
	}

	private static void createTriggers(String baseTableName)
			throws SQLException {
		int columnType;
		int columnCount;
		String tableName;
		Statement stmt = null;
		StringBuffer sqlString;
		String s;
		String lobTableName;
		String columnName;
		String catalogName;
		String schemaName;
		Connection conn = null;

		int j, i;

		try {
			conn = DriverManager.getConnection(url, t4Props.getProperties());
			PreparedStatement pstmt = conn.prepareStatement("select * from "
					+ baseTableName);
			ResultSetMetaData rsmd = pstmt.getMetaData();
			columnCount = rsmd.getColumnCount();
			if (doSql_) {
				stmt = conn.createStatement();
			}
			catalogName = rsmd.getCatalogName(1);
			tableName = rsmd.getTableName(1);
			schemaName = rsmd.getSchemaName(1);
			out_.println("-- Create triggers for " + tableName);
			out_.println("");
			for (i = 1, j = 1; i <= columnCount; i++) {
				columnType = rsmd.getColumnType(i);
				columnName = rsmd.getColumnName(i);
				if (columnType == Types.CLOB || columnType == Types.BLOB) {
					if (columnType == Types.CLOB) {
						if (clobTableName_ == null) {
							throw new SQLException(
									"t4sqlmx.clobTableName property is not set");
						}
						lobTableName = clobTableName_;
					} else {
						if (blobTableName_ == null) {
							throw new SQLException(
									"t4sqlmx.blobTableName property is not set");
						}
						lobTableName = blobTableName_;
					}
					sqlString = new StringBuffer();
					out_.println("-- Trigger for update of column "
							+ columnName + " of " + tableName);
					out_.println("");
					s = "CREATE TRIGGER " + catalogName + "." + schemaName
							+ "." + "zzlobupd_" + tableName + "_" + j;
					out_.println(s);
					sqlString.append(s);
					s = " AFTER UPDATE OF (" + columnName + ") ON "
							+ baseTableName;
					out_.println(s);
					sqlString.append(s);
					s = " REFERENCING OLD AS old_base, NEW AS new_base FOR EACH ROW";
					out_.println(s);
					sqlString.append(s);
					s = " WHEN (old_base." + columnName + " != new_base."
							+ columnName + ")";
					out_.println(s);
					sqlString.append(s);
					s = " DELETE FROM " + lobTableName
							+ " WHERE table_name = '" + tableName + "'";
					out_.println(s);
					sqlString.append(s);
					s = " AND data_locator = old_base." + columnName + " ;";
					out_.println(s);
					sqlString.append(s);
					out_.println("");
					if (doSql_) {
						stmt.executeUpdate(sqlString.toString());
					}
					sqlString = new StringBuffer();
					out_.println("-- Trigger for delete row for column "
							+ columnName + " of " + tableName);
					out_.println("");
					s = "CREATE TRIGGER " + catalogName + "." + schemaName
							+ "." + "zzlobdel_" + tableName + "_" + j;
					out_.println(s);
					sqlString.append(s);
					s = " AFTER DELETE ON " + baseTableName;
					out_.println(s);
					sqlString.append(s);
					s = " REFERENCING OLD AS old_base FOR EACH ROW";
					out_.println(s);
					sqlString.append(s);
					s = " DELETE FROM " + lobTableName
							+ " WHERE table_name = '" + tableName + "'";
					out_.println(s);
					sqlString.append(s);
					s = " AND data_locator = old_base." + columnName + " ;";
					out_.println(s);
					sqlString.append(s);
					out_.println("");
					if (doSql_) {
						stmt.executeUpdate(sqlString.toString());
					}
					j++;
				}
			}
		} finally {
			if (conn != null) {
				conn.close();
			}
		}
	}

	private static void dropTriggers(String baseTableName) throws SQLException {
		int columnType;
		int columnCount;
		String tableName;
		Statement stmt = null;
		StringBuffer sqlString;
		String s;
		String catalogName;
		String schemaName;
		boolean clobFound;
		boolean blobFound;
		Connection conn = null;

		try {
			conn = DriverManager.getConnection(url, t4Props.getProperties());
			PreparedStatement pstmt = conn.prepareStatement("select * from "
					+ baseTableName);
			ResultSetMetaData rsmd = pstmt.getMetaData();
			columnCount = rsmd.getColumnCount();
			if (doSql_) {
				stmt = conn.createStatement();
			}
			catalogName = rsmd.getCatalogName(1);
			tableName = rsmd.getTableName(1);
			schemaName = rsmd.getSchemaName(1);
			out_.println("-- Drop triggers for " + tableName);
			out_.println("");
			for (int i = 1, j = 1; i <= columnCount; i++) {
				columnType = rsmd.getColumnType(i);
				if (columnType == Types.CLOB || columnType == Types.BLOB) {
					s = "DROP TRIGGER " + catalogName + "." + schemaName + "."
							+ "zzlobupd_" + tableName + "_" + j + " ;";
					out_.println(s);
					out_.println("");
					if (doSql_) {
						stmt.executeUpdate(s);
					}
					s = "DROP TRIGGER " + catalogName + "." + schemaName + "."
							+ "zzlobdel_" + tableName + "_" + j + " ;";
					out_.println(s);
					out_.println("");
					if (doSql_) {
						stmt.executeUpdate(s);
					}
					j++;
				}
			}
		} finally {
			if (conn != null) {
				conn.close();
			}
		}
	}

	public static void createSPJTables() throws SQLException {
		String spjBaseTableName_ = null;
		String spjLobTableName_ = null;
		Connection conn = null;
		Statement stmt = null;
		String s;
		StringBuffer sqlString;
		spjBaseTableName_ = "SPJCAT.SPJSCH.SPJ_BASE_TABLE";
		spjLobTableName_ = "SPJCAT.SPJSCH.SPJ_TABLE";
		String createspjcat = "CREATE CATALOG SPJCAT";
		String createspjsch = "CREATE SCHEMA SPJCAT.SPJSCH";
		String createBase = "create table " + spjBaseTableName_
				+ " (BLOB_COL BLOB , CLOB_COL CLOB) ";
		try {
			conn = DriverManager.getConnection(url, t4Props.getProperties());
			stmt = conn.createStatement();
			stmt.execute(createspjcat);
			out_.println(createspjcat);
			stmt.execute(createspjsch);
			out_.println(createspjsch);
			out_.println("");
		} catch (SQLException e) {
			if ((e.getErrorCode() != 1022) || (e.getErrorCode() != 1035))
				System.out.println("Catalog/Schema already exist !");
			e.printStackTrace();
		}
		try {
			stmt.execute("control query default jdbc_process 'true'");
			stmt.executeUpdate(createBase);
			out_.println(createBase);
			out_.println("");
			sqlString = new StringBuffer();
			out_.println("-- SQL statement to create SPJ LOB table "
					+ spjLobTableName_);
			out_.println("");
			s = "CREATE TABLE " + spjLobTableName_;
			out_.println(s);
			sqlString.append(s);
			s = " (table_name CHAR(128) NOT NULL NOT DROPPABLE,";
			out_.println(s);
			sqlString.append(s);
			s = " data_locator LARGEINT NOT NULL NOT DROPPABLE,";
			out_.println(s);
			sqlString.append(s);
			s = " chunk_no INT NOT NULL NOT DROPPABLE,";
			out_.println(s);
			sqlString.append(s);
			s = " lob_data VARCHAR(3880),";
			out_.println(s);
			sqlString.append(s);
			s = " PRIMARY KEY(table_name, data_locator, chunk_no)) ";
			out_.println(s);
			sqlString.append(s);
			s = " ATTRIBUTES EXTENT(1024), MAXEXTENTS 768 ;";
			out_.println(s);
			sqlString.append(s);
			out_.println("");
			stmt = conn.createStatement();
			stmt.executeUpdate(sqlString.toString());
		} finally {
			if (conn != null) {
				conn.close();
			}
		}
	}
	static PrintStream out_;

	static boolean doSql_;

	static String clobTableName_;

	static String blobTableName_;

	// static Properties props;
	static T4Properties t4Props;

	static String url, usr, pwd;

	static String catalog;
	static String schema;
	public static void loadprops() {
		try {

			String propFile = System.getProperty("t4sqlmx.properties");
			if (propFile != null) {
				/*
				 * FileInputStream fs = new FileInputStream(new File(propFile));
				 * Properties props = new Properties(); props.load(fs); t4Props =
				 * new T4Properties(props);
				 */
				t4Props = new T4Properties();
				url = t4Props.getUrl();
				usr = t4Props.getUser();
				pwd = t4Props.getPassword();

			} else {
				System.out
						.println("Error: t4sqlmx.properties is not set. Exiting.");
				System.exit(0);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		}

		try {

			Class.forName("com.tandem.t4jdbc.SQLMXDriver");
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
			System.exit(0);
		}

	}

}
