// @ @ @ START COPYRIGHT @ @ @
//
// Copyright 2003-2007
// Hewlett-Packard Development Company, L.P.
// Protected as an unpublished work.
// All rights reserved.
//
// The computer program listings, specifications and
// documentation herein are the property of Compaq Computer
// Corporation and successor entities such as Hewlett-Packard
// Development Company, L.P., or a third party supplier and
// shall not be reproduced, copied, disclosed, or used in whole
// or in part for any reason without the prior express written
// permission of Hewlett-Packard Development Company, L.P.
//
// @ @ @ END COPYRIGHT @ @ @

package com.tandem.t4jdbc;

import java.nio.charset.CharacterCodingException;
import java.nio.charset.UnsupportedCharsetException;
import java.sql.SQLException;

class odbcas_ASSvc_GetObjRefHdl_exc_ {
	int exception_nr;

	int exception_detail;

	String ErrorText;

	int errorCode;

	//
	// It looks like ODBC doesn't generate error text in all
	// error cases, so the following variable will contain
	// any error text generated by this JDBC driver.
	// Note, this variable is not part of the message, but it
	// represents a value stored in the SQLMXMessages_*.properties file.
	//

	String clientErrorText;

	static final int odbcas_ASSvc_GetObjRefHdl_ASParamError_exn_ = 1;

	static final int odbcas_ASSvc_GetObjRefHdl_ASTimeout_exn_ = 2;

	static final int odbcas_ASSvc_GetObjRefHdl_ASNoSrvrHdl_exn_ = 3;

	static final int odbcas_ASSvc_GetObjRefHdl_ASTryAgain_exn_ = 4;

	static final int odbcas_ASSvc_GetObjRefHdl_ASNotAvailable_exn_ = 5;

	static final int odbcas_ASSvc_GetObjRefHdl_DSNotAvailable_exn_ = 6;

	static final int odbcas_ASSvc_GetObjRefHdl_PortNotAvailable_exn_ = 7;

	static final int odbcas_ASSvc_GetObjRefHdl_InvalidUser_exn_ = 8;

	static final int odbcas_ASSvc_GetObjRefHdl_LogonUserFailure_exn_ = 9;

	// -------------------------------------------------------------------
	void extractFromByteArray(LogicalByteArray buffer1, InterfaceConnection ic)
			throws SQLException, UnsupportedCharsetException,
			CharacterCodingException {
		exception_nr = buffer1.extractInt();
		exception_detail = buffer1.extractInt();

		String temp0 = Integer.toString(exception_nr);
		String temp1 = Integer.toString(exception_detail);

		ErrorText = ic.decodeBytes(buffer1.extractString(), 1);

		switch (exception_nr) {
		case TRANSPORT.CEE_SUCCESS:
			break;
		case odbcas_ASSvc_GetObjRefHdl_ASParamError_exn_:
			throw SQLMXMessages.createSQLException(null, ic.getLocale(),
					"ids_program_error", ErrorText);
		case odbcas_ASSvc_GetObjRefHdl_LogonUserFailure_exn_:
			throw SQLMXMessages.createSQLException(null, ic.getLocale(),
					"ids_unable_to_logon", "");
		case odbcas_ASSvc_GetObjRefHdl_ASNotAvailable_exn_:
			throw SQLMXMessages.createSQLException(null, ic.getLocale(),
					"ids_assoc_srvr_not_available", ErrorText);
		case odbcas_ASSvc_GetObjRefHdl_DSNotAvailable_exn_:
			throw SQLMXMessages.createSQLException(null, ic.getLocale(),
					"ids_ds_not_available", new T4Properties()
							.getServerDataSource());
		case odbcas_ASSvc_GetObjRefHdl_PortNotAvailable_exn_:
		case odbcas_ASSvc_GetObjRefHdl_ASTryAgain_exn_:
		case odbcas_ASSvc_GetObjRefHdl_ASNoSrvrHdl_exn_:
		case -27:
		case -29:

			// should be retried by the driver so dont throw exception
			clientErrorText = "ids_port_not_available";
			break;
		case odbcas_ASSvc_GetObjRefHdl_InvalidUser_exn_:
			throw SQLMXMessages.createSQLException(null, ic.getLocale(),
					"ids_28_000", null);
		case odbcas_ASSvc_GetObjRefHdl_ASTimeout_exn_:
			throw SQLMXMessages.createSQLException(null, ic.getLocale(),
					"ids_s1_t00", null);
		default:
			throw SQLMXMessages.createSQLException(null, ic.getLocale(),
					"unknown_connect_error", null);
		}
	}
}
